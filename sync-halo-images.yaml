AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a serverless application which executes a DataSync task daily and sends notifications on success or failure.

Parameters:
  TaskName:
    Description: Task name can include letters (A-Z and a-z), numbers (0-9), and dashes (-).
    Type: String
    Default: HaloImages
  SourceLocationId: 
    Description: DataSync source location ID
    Type: String
  DestinationLocationId: 
    Description: DataSync destination location ID
    Type: String
  NotificationEmail:
    Description: Email address to receive notifications (usually a mailing list)
    Type: String
  TaskSchedule:
    Description: A cron expression (in UTC time) which specifies when this task should be run.
    Type: String
    Default: "cron(0 23 * * ? *)"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label: 
          default: Task Name
        Parameters: 
          - TaskName
      - Label: 
          default: Locations
        Parameters: 
          - SourceLocationId
          - DestinationLocationId
      - Label: 
          default: Schedule
        Parameters: 
          - TaskSchedule
      - Label: 
          default: Notifications
        Parameters: 
          - NotificationEmail

Resources:

  ##########################
  # Create a DataSync task #
  ##########################

  # Creates a CloudWatch log group for the DataSync task which retains entries for 180 days
  DataSyncTaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub "${TaskName}DataSyncTask"
      RetentionInDays: 180

  # Creates a CloudWatch Logs resource policy which allows DataSync to create log streams and to put log events for the specified log group
  DataSyncTaskLogsResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: DataSyncTaskLogsResourcePolicy
      PolicyDocument: !Sub "{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"${TaskName}DataSyncTaskLogsResourcePolicy\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": [ \"datasync.amazonaws.com\" ] }, \"Action\": [ \"logs:PutLogEvents\", \"logs:CreateLogStream\" ], \"Resource\": \"${DataSyncTaskLogGroup.Arn}\" } ] }"
    DependsOn: DataSyncTaskLogGroup

  # Creates a DataSync task from the provided source and destination
  DataSyncTask:
    Type: "AWS::DataSync::Task"
    Properties:
      Name: !Ref TaskName
      # CloudWatchLogGroupArn: !GetAtt DataSyncTaskLogGroup.Arn # wildcard is not supported
      CloudWatchLogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DataSyncTaskLogGroup}"
      SourceLocationArn: !Sub "arn:aws:datasync:${AWS::Region}:${AWS::AccountId}:location/${SourceLocationId}"
      DestinationLocationArn: !Sub "arn:aws:datasync:${AWS::Region}:${AWS::AccountId}:location/${DestinationLocationId}"
      Options: 
          LogLevel: TRANSFER
          OverwriteMode: ALWAYS
          PreserveDeletedFiles: PRESERVE
          TaskQueueing: ENABLED
          TransferMode: CHANGED
          VerifyMode: ONLY_FILES_TRANSFERRED
    DependsOn: DataSyncTaskLogGroup


  #############################################################
  # Create a Lambda function which executes the DataSync task #
  #############################################################

  # Creates a CloudWatch log group for a Lambda function which executes the DataSync task
  DataSyncTaskExecutionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${TaskName}DataSyncTask"
      RetentionInDays: 180

  # Creates an IAM role for a Lambda function which executes the DataSync task
  DataSyncTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action:
               "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${TaskName}DataSyncTaskExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt DataSyncTaskExecutionLogGroup.Arn
              - Effect: Allow
                Action: 
                  - "datasync:StartTaskExecution"
                Resource: !GetAtt DataSyncTask.TaskArn
    DependsOn: 
      - DataSyncTask
      - DataSyncTaskExecutionLogGroup

  # Creates a Lambda function which executes the DataSync task
  DataSyncTaskExecutionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${TaskName}DataSyncTask"
      Description: !Sub "${TaskName} - Executes the DataSync task" 
      Handler: index.lambda_handler
      MemorySize: 256
      Timeout: 900
      Runtime: python3.9
      Role: !GetAtt DataSyncTaskExecutionRole.Arn
      Environment:
        Variables:
          TZ: America/New_York
          TaskArn: !GetAtt DataSyncTask.TaskArn
      Code: 
        ZipFile: |
          import json
          from datetime import date, timedelta
          from os import getenv
          from boto3 import client

          def lambda_handler(event, context):
              # assume folder name is YYYY-MM-DD
              yesterday = date.today() - timedelta(days=1)
              sync_folder = "/" + yesterday.strftime("%Y-%m-%d")

              print(getenv("TaskArn"))
              print(sync_folder)

              # execute task and return task execution ARN
              return client("datasync").start_task_execution(
                TaskArn=getenv("TaskArn"),
                Includes=[{"FilterType": "SIMPLE_PATTERN", "Value": sync_folder}]
              )
    DependsOn: 
      - DataSyncTask
      - DataSyncTaskExecutionRole

  # Creates an EventBridge Rule which executes the DataSync task on a daily basis (at 23:00)
  DataSyncTaskExecutionEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${TaskName}DataSyncTaskExecution"
      Description: !Sub "${TaskName}DataSyncTask - Executes the specified Lambda function on a daily basis"
      Targets:
        - Id: !Ref DataSyncTaskExecutionLambda
          Arn: !GetAtt DataSyncTaskExecutionLambda.Arn
      ScheduleExpression: !Ref TaskSchedule
    DependsOn: 
      - DataSyncTaskExecutionLambda
  
  # Grants permission for the DataSyncTaskExecutionEventRule to invoke the DataSyncTaskExecutionLambda function
  DataSyncTaskExecutionLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DataSyncTaskExecutionLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DataSyncTaskExecutionEventRule.Arn
    DependsOn:
      - DataSyncTaskExecutionEventRule
      - DataSyncTaskExecutionLambda


  ##################################################################################################
  # Create an SNS Topic and a Lambda function which publishes status updates for the DataSync task #
  ##################################################################################################

  # Creates a SNS topic and a subscription for receiving updates about DataSync task execution status
  DataSyncTaskNotificationsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Sub "${TaskName}DataSyncNotifications"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  # Creates a CloudWatch log group for a Lambda function which publishes updates about DataSync task execution status
  DataSyncTaskNotificationsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${TaskName}DataSyncTaskNotifications"
      RetentionInDays: 180

  # Creates an IAM role for a Lambda function which publishes updates about DataSync task execution status
  DataSyncTaskNotificationsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action:
               "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${TaskName}DataSyncTaskNotificationsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt DataSyncTaskNotificationsLogGroup.Arn
              - Effect: Allow
                Action: 
                  - "logs:DescribeLogStreams"
                  - "logs:GetLogEvents"
                Resource: !GetAtt DataSyncTaskLogGroup.Arn
              - Effect: Allow
                Action: 
                  - "datasync:DescribeTask"
                Resource: !GetAtt DataSyncTask.TaskArn
              - Effect: Allow
                Action: 
                  - "datasync:DescribeTaskExecution"
                Resource: !Sub "${DataSyncTask.TaskArn}/execution/*"
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref DataSyncTaskNotificationsTopic
    DependsOn: 
      - DataSyncTask
      - DataSyncTaskLogGroup
      - DataSyncTaskNotificationsLogGroup

  # Creates a Lambda function which publishes updates about DataSync task execution status
  DataSyncTaskNotificationsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${TaskName}DataSyncTaskNotifications"
      Description: !Sub "${TaskName} - Publishes updates about DataSync task execution status" 
      Handler: index.lambda_handler
      MemorySize: 256
      Timeout: 900
      Runtime: python3.9
      Role: !GetAtt DataSyncTaskNotificationsRole.Arn
      Environment:
        Variables:
          TZ: America/New_York
          TaskArn: !GetAtt DataSyncTask.TaskArn
          LogGroupArn: !GetAtt DataSyncTaskLogGroup.Arn
          TopicArn: !Ref DataSyncTaskNotificationsTopic
      Code: 
        ZipFile: |
          import json
          from os import getenv
          from textwrap import dedent
          from boto3 import client
          
          datasync_client = client("datasync")
          sns_client = client("sns")

          def lambda_handler(event, context):
              execution_status = datasync_client.describe_task_execution(
                  TaskExecutionArn=event['resources'][0]
              )

              print(event)
              print(execution_status)

              message = dedent(f"""
                  Dear Administrators,

                  The HALO DataSync task which started on {execution_status["StartTime"]} has completed execution with the following status: {execution_status["Status"]}.
                  For more information about individual files transferred, review the following CloudWatch log group: {getenv("LogGroupArn")}
                  
                  Start Time: {execution_status["StartTime"]}
                  Total Duration: {execution_status["Result"]["TotalDuration"]}
                  Files Transferred: {execution_status["FilesTransferred"]}
                  GBs Transferred: {execution_status["BytesTransferred"] / 1e9}""")

              if execution_status["Status"] == "ERROR":
                  message += dedent(f"""
                      Error Code: {execution_status["Result"]["ErrorCode"]}
                      Error Details: {execution_status["Result"]["ErrorDetail"]}""")

              return sns_client.publish(
                  TopicArn=getenv("TopicArn"),
                  Message=message
              )
    DependsOn: 
      - DataSyncTask
      - DataSyncTaskLogGroup
      - DataSyncTaskNotificationsRole
      - DataSyncTaskNotificationsTopic

  # Creates an EventBridge Rule which send DataSync task execution state change events to a Lambda function
  DataSyncTaskNotificationsEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${TaskName}DataSyncTaskNotifications"
      Description: !Sub "${TaskName}DataSyncTaskNotifications - Executes the specified Lambda function whenever the task's execution state changes"
      EventPattern:
        source: 
          - aws.datasync
        detail-type: 
          - DataSync Task Execution State Change
        resources:
          - prefix: !Sub "${DataSyncTask.TaskArn}/execution/"
        detail:
          State:
            - ERROR
            - SUCCESS
      Targets:
        - Id: !Ref DataSyncTaskNotificationsLambda
          Arn: !GetAtt DataSyncTaskNotificationsLambda.Arn
    DependsOn: 
      - DataSyncTask
      - DataSyncTaskNotificationsLambda
  
  # Grants permission for the DataSyncTaskNotificationsEventRule to invoke the DataSyncTaskNotificationsLambda function
  DataSyncTaskNotificationsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DataSyncTaskNotificationsLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DataSyncTaskNotificationsEventRule.Arn
    DependsOn:
      - DataSyncTaskNotificationsEventRule
      - DataSyncTaskNotificationsLambda
